# This references the default golang container from
# the Docker Hub: https://registry.hub.docker.com/u/library/golang/
# If you want Google's container you would reference google/golang
# Read more about containers on our dev center
# https://devcenter.wercker.com/overview-and-core-concepts/containers/
box: golang

dev:
  steps:
    - setup-go-workspace:
      package-dir: github.com/imcgonigle/some-go-app

    - script:
      name: env
      code: env
    
    - script:
      name: go get
      code: |
        cd $WERCKER_SOURCE_DIR
        go version
        go get -u github.com/Masterminds/glide
        exort PATH=$WERCKER_SOURCE_DIR/bin:$PATH
        glide install

    - internal/watch:
      code: go run main.go
      reload: true
  
build:
  steps:
    - setup-go-workspace:
      package-dir: github.com/imcgonigle/some-go-app

    - script:
      name: env
      code: env
    
    - script:
      name: go get
      code: |
        cd $WERCKER_SOURCE_DIR
        go version
        go get -u github.com/Masterminds/glide
        export PATH=$WERCKER_SOURCE_DIR/bin:$PATH
    
    # Build the project
    - script:
      name: go build
      code: |
        go build
    
    # Test the project
    - script:
      name: go test
      code: |
        go test -v $(glide novendor)
    
    - script:
      name: copy files to wercker output
      code: |
        cp -R ./ ${WERCKER_OUTPUT_DIR}
  
deploy:
  steps:
    - internal/docker-push:
      username: $DOCKER_USERNAME
      password: $DOCKER_PASSWORD
      cmd: /pipeline/source/hello
      port: "8080"
      tag: latest
      repository: imcgonigle/some-go-app
      registry: https://registry.hub.docker.com

    - cng/cg-deploy:
      api: $API
      user: $USER
      password: $PASSWORD
      org: $ORG
      space: $SPACE
      appname: wercker-step-hello
      docker_image: imcgonigle/some-go-app
